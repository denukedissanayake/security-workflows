name: 'Scan Vulnerabilities'
description: 'Runs vulnerability scans for multiple programming languages'
author: 'Your Organization'

inputs:
  snyk-token:
    description: 'Snyk API token for authentication (optional, if not using language-specific tools)'
    required: false
  working-directory:
    description: 'Directory to run scans in'
    required: false
    default: '.'
  language:
    description: 'Programming language to scan (auto-detect if not specified: nodejs, python, rust, scala, java, go, dotnet, ruby, php)'
    required: false
    default: 'auto'
  scanner:
    description: 'Scanner to use (auto, snyk, npm-audit, pip-audit, cargo-audit, etc.)'
    required: false
    default: 'auto'
  severity-threshold:
    description: 'Minimum severity level to report (low, medium, high, critical)'
    required: false
    default: 'low'

outputs:
  scan-results-path:
    description: 'Path to the merged scan results JSON file'
    value: ${{ steps.merge.outputs.results-path }}
  detected-language:
    description: 'Detected programming language'
    value: ${{ steps.detect.outputs.language }}
  scanner-used:
    description: 'Scanner tool that was used'
    value: ${{ steps.detect.outputs.scanner }}

runs:
  using: "composite"
  steps:
    - name: Detect project language and scanner
      id: detect
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "INFO: Detecting project language and appropriate scanner"
        
        LANGUAGE="${{ inputs.language }}"
        SCANNER="${{ inputs.scanner }}"
        
        # Auto-detect language if not specified
        if [ "$LANGUAGE" = "auto" ]; then
          if [ -f "package.json" ]; then
            LANGUAGE="nodejs"
            echo "INFO: Detected Node.js project (package.json found)"
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ] || [ -f "pyproject.toml" ] || [ -f "Pipfile" ]; then
            LANGUAGE="python"
            echo "INFO: Detected Python project"
          elif [ -f "Cargo.toml" ]; then
            LANGUAGE="rust"
            echo "INFO: Detected Rust project (Cargo.toml found)"
          elif [ -f "build.sbt" ] || [ -f "build.sc" ]; then
            LANGUAGE="scala"
            echo "INFO: Detected Scala project (build.sbt or build.sc found)"
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            LANGUAGE="java"
            echo "INFO: Detected Java project"
          elif [ -f "go.mod" ]; then
            LANGUAGE="go"
            echo "INFO: Detected Go project (go.mod found)"
          elif [ -f "*.csproj" ] || [ -f "*.sln" ]; then
            LANGUAGE="dotnet"
            echo "INFO: Detected .NET project"
          elif [ -f "Gemfile" ]; then
            LANGUAGE="ruby"
            echo "INFO: Detected Ruby project (Gemfile found)"
          elif [ -f "composer.json" ]; then
            LANGUAGE="php"
            echo "INFO: Detected PHP project (composer.json found)"
          else
            LANGUAGE="unknown"
            echo "WARNING: Could not auto-detect language, will try Snyk universal scanner"
          fi
        fi
        
        # Auto-select scanner based on language
        if [ "$SCANNER" = "auto" ]; then
          case "$LANGUAGE" in
            nodejs)
              if [ -n "${{ inputs.snyk-token }}" ]; then
                SCANNER="snyk"
              else
                SCANNER="npm-audit"
              fi
              ;;
            python)
              if [ -n "${{ inputs.snyk-token }}" ]; then
                SCANNER="snyk"
              else
                SCANNER="pip-audit"
              fi
              ;;
            rust)
              SCANNER="cargo-audit"
              ;;
            scala)
              if [ -n "${{ inputs.snyk-token }}" ]; then
                SCANNER="snyk"
              else
                SCANNER="trivy"
              fi
              ;;
            java)
              if [ -n "${{ inputs.snyk-token }}" ]; then
                SCANNER="snyk"
              else
                SCANNER="owasp-dependency-check"
              fi
              ;;
            go)
              SCANNER="govulncheck"
              ;;
            dotnet)
              SCANNER="dotnet-list"
              ;;
            ruby)
              SCANNER="bundler-audit"
              ;;
            php)
              SCANNER="composer-audit"
              ;;
            *)
              if [ -n "${{ inputs.snyk-token }}" ]; then
                SCANNER="snyk"
              else
                SCANNER="trivy"
              fi
              ;;
          esac
          echo "INFO: Selected scanner: $SCANNER for language: $LANGUAGE"
        fi
        
        echo "language=$LANGUAGE" >> $GITHUB_OUTPUT
        echo "scanner=$SCANNER" >> $GITHUB_OUTPUT

    - name: Setup environment for detected language
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        LANGUAGE="${{ steps.detect.outputs.language }}"
        echo "INFO: Setting up environment for $LANGUAGE"
        
        case "$LANGUAGE" in
          nodejs)
            echo "INFO: Node.js environment will be set up in next step"
            ;;
          python)
            echo "INFO: Python environment detected"
            python3 --version || echo "WARNING: Python3 not found"
            ;;
          rust)
            echo "INFO: Rust environment detected"
            cargo --version || echo "WARNING: Cargo not found"
            ;;
          scala)
            echo "INFO: Scala environment detected"
            sbt --version || echo "WARNING: sbt not found"
            ;;
          java)
            echo "INFO: Java environment detected"
            java -version || echo "WARNING: Java not found"
            ;;
          go)
            echo "INFO: Go environment detected"
            go version || echo "WARNING: Go not found"
            ;;
          *)
            echo "INFO: Using generic scanning tools"
            ;;
        esac

    - name: Set up Node.js (if needed)
      if: steps.detect.outputs.language == 'nodejs'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Set up Python (if needed)
      if: steps.detect.outputs.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies based on language
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        LANGUAGE="${{ steps.detect.outputs.language }}"
        echo "INFO: Installing dependencies for $LANGUAGE"
        
        case "$LANGUAGE" in
          nodejs)
            if [ -f "package-lock.json" ]; then
              npm ci || npm install
            elif [ -f "yarn.lock" ]; then
              yarn install --frozen-lockfile || yarn install
            elif [ -f "pnpm-lock.yaml" ]; then
              npx pnpm install --frozen-lockfile || npx pnpm install
            else
              npm install
            fi
            ;;
          python)
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt || true
            elif [ -f "Pipfile" ]; then
              pip install pipenv && pipenv install || true
            elif [ -f "pyproject.toml" ]; then
              pip install poetry && poetry install || true
            fi
            ;;
          rust)
            cargo fetch || true
            ;;
          scala)
            if [ -f "build.sbt" ]; then
              sbt update || true
            elif [ -f "build.sc" ]; then
              mill resolve _ || true
            fi
            ;;
          java)
            if [ -f "pom.xml" ]; then
              mvn dependency:resolve || true
            elif [ -f "build.gradle" ]; then
              ./gradlew dependencies || gradle dependencies || true
            fi
            ;;
          go)
            go mod download || true
            ;;
          ruby)
            bundle install || true
            ;;
          php)
            composer install || true
            ;;
        esac

    - name: Install scanner tool
      shell: bash
      run: |
        SCANNER="${{ steps.detect.outputs.scanner }}"
        echo "INFO: Installing scanner: $SCANNER"
        
        case "$SCANNER" in
          snyk)
            npm install -g snyk
            ;;
          npm-audit)
            echo "INFO: npm audit is built-in to npm"
            ;;
          pip-audit)
            pip install pip-audit
            ;;
          cargo-audit)
            cargo install cargo-audit || true
            ;;
          govulncheck)
            go install golang.org/x/vuln/cmd/govulncheck@latest || true
            ;;
          bundler-audit)
            gem install bundler-audit || true
            ;;
          trivy)
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy || echo "WARNING: Could not install trivy"
            ;;
          *)
            echo "INFO: Scanner $SCANNER will use default tooling"
            ;;
        esac

    - name: Run vulnerability scan
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        SCANNER="${{ steps.detect.outputs.scanner }}"
        LANGUAGE="${{ steps.detect.outputs.language }}"
        echo "INFO: Running vulnerability scan with $SCANNER"
        
        case "$SCANNER" in
          snyk)
            if [ -n "${{ inputs.snyk-token }}" ]; then
              snyk auth ${{ inputs.snyk-token }}
              # Snyk returns exit code 1 when vulnerabilities are found, so we need to handle it properly
              snyk test --json --severity-threshold=${{ inputs.severity-threshold }} > dependency-scan-results.json || true
              # If the file is empty or invalid, create an empty array
              if [ ! -s dependency-scan-results.json ] || ! jq empty dependency-scan-results.json 2>/dev/null; then
                echo '{"vulnerabilities": []}' > dependency-scan-results.json
              fi
              
              snyk code test --json --severity-threshold=${{ inputs.severity-threshold }} > code-scan-results.json || true
              if [ ! -s code-scan-results.json ] || ! jq empty code-scan-results.json 2>/dev/null; then
                echo '{"vulnerabilities": []}' > code-scan-results.json
              fi
            else
              echo "WARNING: No Snyk token provided, skipping Snyk scan"
              echo '{"vulnerabilities": []}' > dependency-scan-results.json
              echo '{"vulnerabilities": []}' > code-scan-results.json
            fi
            ;;
          npm-audit)
            npm audit --json > dependency-scan-results.json || echo '{"vulnerabilities": {}}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          pip-audit)
            pip-audit --format=json > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          cargo-audit)
            cargo audit --json > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          govulncheck)
            govulncheck -json ./... > dependency-scan-results.json 2>&1 || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          bundler-audit)
            bundle-audit check --format=json > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          composer-audit)
            composer audit --format=json > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          dotnet-list)
            dotnet list package --vulnerable --include-transitive --format json > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          trivy)
            trivy fs --format json --severity ${{ inputs.severity-threshold }} . > dependency-scan-results.json || echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
          *)
            echo "WARNING: Unknown scanner $SCANNER"
            echo '{"vulnerabilities": []}' > dependency-scan-results.json
            echo '{"vulnerabilities": []}' > code-scan-results.json
            ;;
        esac
        
        echo "INFO: Scan completed"

    - name: Normalize scan results to common format
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        SCANNER="${{ steps.detect.outputs.scanner }}"
        LANGUAGE="${{ steps.detect.outputs.language }}"
        
        echo "INFO: Normalizing scan results to common format"
        
        cat > normalize-results.py << 'NORMALIZE_EOF'
        import json
        import sys
        import os
        
        def normalize_snyk(data):
            """Normalize Snyk format"""
            if 'vulnerabilities' in data:
                return data.get('vulnerabilities', [])
            return []
        
        def normalize_npm_audit(data):
            """Normalize npm audit format"""
            vulnerabilities = []
            if 'vulnerabilities' in data and isinstance(data['vulnerabilities'], dict):
                for pkg_name, vuln_info in data['vulnerabilities'].items():
                    if isinstance(vuln_info, dict):
                        vulnerabilities.append({
                            'id': vuln_info.get('name', pkg_name),
                            'title': vuln_info.get('title', f'Vulnerability in {pkg_name}'),
                            'severity': vuln_info.get('severity', 'unknown').lower(),
                            'packageName': pkg_name,
                            'version': vuln_info.get('range', 'unknown'),
                            'description': vuln_info.get('url', ''),
                            'isUpgradable': vuln_info.get('fixAvailable', False),
                            'nearestFixedInVersion': vuln_info.get('fixAvailable', {}).get('version') if isinstance(vuln_info.get('fixAvailable'), dict) else None
                        })
            return vulnerabilities
        
        def normalize_pip_audit(data):
            """Normalize pip-audit format"""
            vulnerabilities = []
            if 'vulnerabilities' in data:
                for vuln in data['vulnerabilities']:
                    vulnerabilities.append({
                        'id': vuln.get('id', 'unknown'),
                        'title': vuln.get('description', 'Unknown vulnerability'),
                        'severity': vuln.get('severity', 'unknown').lower(),
                        'packageName': vuln.get('name', 'unknown'),
                        'version': vuln.get('version', 'unknown'),
                        'description': vuln.get('description', ''),
                        'isUpgradable': bool(vuln.get('fix_versions')),
                        'nearestFixedInVersion': vuln.get('fix_versions', [None])[0] if vuln.get('fix_versions') else None
                    })
            return vulnerabilities
        
        def normalize_cargo_audit(data):
            """Normalize cargo-audit format"""
            vulnerabilities = []
            if 'vulnerabilities' in data and 'list' in data['vulnerabilities']:
                for vuln in data['vulnerabilities']['list']:
                    vulnerabilities.append({
                        'id': vuln.get('advisory', {}).get('id', 'unknown'),
                        'title': vuln.get('advisory', {}).get('title', 'Unknown vulnerability'),
                        'severity': 'high',  # cargo-audit doesn't always provide severity
                        'packageName': vuln.get('package', {}).get('name', 'unknown'),
                        'version': vuln.get('package', {}).get('version', 'unknown'),
                        'description': vuln.get('advisory', {}).get('description', ''),
                        'isUpgradable': bool(vuln.get('versions', {}).get('patched')),
                        'nearestFixedInVersion': vuln.get('versions', {}).get('patched', [None])[0] if vuln.get('versions', {}).get('patched') else None
                    })
            return vulnerabilities
        
        def normalize_trivy(data):
            """Normalize Trivy format"""
            vulnerabilities = []
            if 'Results' in data:
                for result in data['Results']:
                    if 'Vulnerabilities' in result:
                        for vuln in result['Vulnerabilities']:
                            vulnerabilities.append({
                                'id': vuln.get('VulnerabilityID', 'unknown'),
                                'title': vuln.get('Title', 'Unknown vulnerability'),
                                'severity': vuln.get('Severity', 'unknown').lower(),
                                'packageName': vuln.get('PkgName', 'unknown'),
                                'version': vuln.get('InstalledVersion', 'unknown'),
                                'description': vuln.get('Description', ''),
                                'isUpgradable': bool(vuln.get('FixedVersion')),
                                'nearestFixedInVersion': vuln.get('FixedVersion')
                            })
            return vulnerabilities
        
        def normalize_generic(data):
            """Generic normalization - try to extract vulnerabilities"""
            if isinstance(data, dict):
                if 'vulnerabilities' in data:
                    vulns = data['vulnerabilities']
                    if isinstance(vulns, list):
                        return vulns
            return []
        
        scanner = os.environ.get('SCANNER', 'unknown')
        
        # Read dependency scan results
        try:
            with open('dependency-scan-results.json', 'r') as f:
                dep_data = json.load(f)
        except:
            dep_data = {'vulnerabilities': []}
        
        # Read code scan results
        try:
            with open('code-scan-results.json', 'r') as f:
                code_data = json.load(f)
        except:
            code_data = {'vulnerabilities': []}
        
        # Normalize based on scanner type
        dep_vulns = []
        code_vulns = []
        
        if scanner == 'snyk':
            dep_vulns = normalize_snyk(dep_data)
            code_vulns = normalize_snyk(code_data)
        elif scanner == 'npm-audit':
            dep_vulns = normalize_npm_audit(dep_data)
        elif scanner == 'pip-audit':
            dep_vulns = normalize_pip_audit(dep_data)
        elif scanner == 'cargo-audit':
            dep_vulns = normalize_cargo_audit(dep_data)
        elif scanner == 'trivy':
            dep_vulns = normalize_trivy(dep_data)
        else:
            dep_vulns = normalize_generic(dep_data)
            code_vulns = normalize_generic(code_data)
        
        # Combine results
        all_vulns = dep_vulns + code_vulns
        
        # Write normalized results
        output = {
            'vulnerabilities': all_vulns,
            'summary': {
                'total': len(all_vulns),
                'dependency_issues': len(dep_vulns),
                'code_issues': len(code_vulns),
                'scanner': scanner,
                'language': os.environ.get('LANGUAGE', 'unknown')
            }
        }
        
        with open('normalized-scan-results.json', 'w') as f:
            json.dump(output, f, indent=2)
        
        print(f"INFO: Normalized {len(all_vulns)} vulnerabilities")
        NORMALIZE_EOF
        
        SCANNER="${{ steps.detect.outputs.scanner }}" LANGUAGE="${{ steps.detect.outputs.language }}" python3 normalize-results.py || echo '{"vulnerabilities": [], "summary": {"total": 0}}' > normalized-scan-results.json

    - name: Merge scan results
      id: merge
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "INFO: Finalizing scan results"
        
        # Use normalized results as final output
        if [ -f "normalized-scan-results.json" ]; then
          cp normalized-scan-results.json full-scan-results.json
        else
          echo '{"vulnerabilities": [], "summary": {"total": 0}}' > full-scan-results.json
        fi
        
        # Get absolute path
        RESULTS_PATH="$(pwd)/full-scan-results.json"
        echo "results-path=$RESULTS_PATH" >> $GITHUB_OUTPUT
        echo "INFO: Scan results available at $RESULTS_PATH"
        
        # Print summary
        VULN_COUNT=$(jq '.summary.total // 0' full-scan-results.json 2>/dev/null || echo "0")
        echo "INFO: Total vulnerabilities found: $VULN_COUNT"

branding:
  icon: 'shield'
  color: 'red'
