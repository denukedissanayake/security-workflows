name: Reusable Security Vulnerability Scan

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory to run scans in'
        required: false
        type: string
        default: '.'
      language:
        description: 'Programming language (auto, nodejs, python, rust, scala, java, go, dotnet, ruby, php)'
        required: false
        type: string
        default: 'auto'
      scanner:
        description: 'Scanner to use (auto, snyk, npm-audit, pip-audit, cargo-audit, trivy, etc.)'
        required: false
        type: string
        default: 'auto'
      severity-threshold:
        description: 'Minimum severity level to report (low, medium, high, critical)'
        required: false
        type: string
        default: 'low'
      create-issue:
        description: 'Whether to create a GitHub issue for vulnerabilities'
        required: false
        type: boolean
        default: true
    secrets:
      SNYK_TOKEN:
        description: 'Snyk API token for authentication (optional if using other scanners)'
        required: false
      GH_TOKEN:
        description: 'GitHub token with permissions to create issues'
        required: false
    outputs:
      vulnerabilities-found:
        description: 'Number of vulnerabilities found'
        value: ${{ jobs.vulnerability-detection.outputs.vulnerabilities-found }}
      has-vulnerabilities:
        description: 'Whether vulnerabilities were found'
        value: ${{ jobs.vulnerability-detection.outputs.has-vulnerabilities }}

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    outputs:
      vulnerabilities-found: ${{ steps.process.outputs.vulnerability-count }}
      has-vulnerabilities: ${{ steps.process.outputs.has-vulnerabilities }}
      detected-language: ${{ steps.scan.outputs.detected-language }}
      scanner-used: ${{ steps.scan.outputs.scanner-used }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run vulnerability scan
        id: scan
        uses: ./.github/actions/scan-vulnerabilities
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}
          working-directory: ${{ inputs.working-directory }}
          language: ${{ inputs.language }}
          scanner: ${{ inputs.scanner }}
          severity-threshold: ${{ inputs.severity-threshold }}

      - name: Process vulnerabilities
        id: process
        uses: ./.github/actions/process-vulnerabilities
        with:
          scan-results-path: ${{ steps.scan.outputs.scan-results-path }}
          repository: ${{ github.repository }}
          language: ${{ steps.scan.outputs.detected-language }}
          scanner: ${{ steps.scan.outputs.scanner-used }}

      - name: Upload vulnerability artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-data
          path: |
            full-scan-results.json
            detailed-vulnerabilities.json
            vulnerability-context.md
            snyk-results.json

  create-vulnerability-issue:
    runs-on: ubuntu-latest
    needs: vulnerability-detection
    if: needs.vulnerability-detection.outputs.has-vulnerabilities == 'true' && inputs.create-issue
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download vulnerability data
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-data
          path: vulnerability-data/

      - name: Create security issue with Copilot assignment
        uses: ./.github/actions/create-security-issue
        with:
          github-token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          vulnerability-data-path: 'vulnerability-data/detailed-vulnerabilities.json'
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}
          server-url: ${{ github.server_url }}
